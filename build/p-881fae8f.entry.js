import{r as t,h as s,F as i}from"./p-56844d63.js";const h=class{constructor(s){t(this,s)}render(){return s("div",null,s("main",null,s("game-of-life",null)))}};class e{static get isProduction(){return!0}static get isDevelopment(){return window.location.hostname.indexOf("localhost")>-1||!1}static get isTest(){return!1}}class n{constructor(){this.livingCells=[]}setCells(t){this.livingCells=t}toggleCell(t){const s=this.livingCells.findIndex((s=>s.x===t.x&&s.y===t.y));s>-1?this.livingCells.splice(s,1):this.livingCells.push(t)}getLivingCells(){return this.livingCells}nextStep(){const t=[];this.getLivingCellsAndNeighbours().forEach((s=>{const i=this.getLivingNeighbours(s),h=t.some((t=>s.x===t.x&&s.y===t.y));this.shouldCellBeAlive(s,i)&&!h&&t.push(s)})),this.setCells(t)}getLivingNeighbours(t){return this.getNeighbours(t).filter((t=>this.getLivingCells().some((s=>t.x===s.x&&t.y===s.y)))).filter((s=>!(s.x===t.x&&s.y===t.y)))}getNeighbours(t){const s=[];for(let i=t.x-1;i<=t.x+1;i++)for(let h=t.y-1;h<=t.y+1;h++)s.push({x:i,y:h});return s}getLivingCellsAndNeighbours(){let t=[];return this.getLivingCells().forEach((s=>{t=t.concat(this.getNeighbours(s))})),t}shouldCellBeAlive(t,s){const i=this.getLivingCells().some((s=>t.x===s.x&&t.y===s.y));return i&&(2===s.length||3===s.length)||!i&&3===s.length}}const l=[{x:10,y:10},{x:11,y:10},{x:12,y:10},{x:10,y:11},{x:12,y:11},{x:10,y:12},{x:11,y:12},{x:12,y:12},{x:10,y:13},{x:11,y:13},{x:12,y:13},{x:10,y:14},{x:11,y:14},{x:12,y:14},{x:10,y:15},{x:11,y:15},{x:12,y:15},{x:10,y:16},{x:12,y:16},{x:10,y:17},{x:11,y:17},{x:12,y:17}],o=[{x:3,y:6},{x:4,y:6},{x:3,y:7},{x:4,y:7},{x:13,y:6},{x:13,y:7},{x:13,y:8},{x:14,y:9},{x:15,y:10},{x:16,y:10},{x:18,y:9},{x:19,y:8},{x:19,y:7},{x:19,y:6},{x:20,y:7},{x:17,y:7},{x:18,y:5},{x:16,y:4},{x:15,y:4},{x:14,y:5},{x:23,y:6},{x:24,y:6},{x:24,y:5},{x:23,y:5},{x:23,y:4},{x:24,y:4},{x:25,y:3},{x:25,y:7},{x:27,y:3},{x:27,y:2},{x:27,y:7},{x:27,y:8},{x:37,y:4},{x:37,y:5},{x:38,y:5},{x:38,y:4}],r=class{constructor(s){t(this,s),this.playSpeed=100,this.iterations=0,this.visibilityChanged=!1,this.tick=0,this.width=800,this.height=800,this.cellSize=20,this.pixelShifter=.5,this.doublePixelShifter=2*this.pixelShifter,this.strokeColor="#444",this.cellColor="#F00"}componentDidLoad(){this.canvas=document.getElementById("grid"),this.ctx=this.canvas.getContext("2d"),this.canvas.width=this.width+this.doublePixelShifter,this.canvas.height=this.height+this.doublePixelShifter,this.machine=new n,this.redrawGrid(),this.canvas.addEventListener("mousedown",this.onCanvasClick.bind(this)),window.addEventListener("visibilitychange",this.onVisibilityChange.bind(this))}disconnectedCallback(){clearInterval(this.playInterval),this.canvas.removeEventListener("mousedown",this.onCanvasClick.bind(this)),window.removeEventListener("visibilitychange",this.onVisibilityChange.bind(this))}onVisibilityChange(){"hidden"===document.visibilityState&&this.pause()}drawGrid(){this.drawHorizontalRules(),this.drawVerticalRules()}drawCells(){this.machine.getLivingCells().forEach((t=>{const s=t.x*this.cellSize+this.doublePixelShifter,i=t.y*this.cellSize+this.doublePixelShifter,h=this.cellSize-this.doublePixelShifter;this.ctx.fillStyle=this.cellColor,this.ctx.fillRect(s,i,h,h)}))}drawHorizontalRules(){this.ctx.beginPath();for(let t=0;t<=this.height;t+=this.cellSize)this.ctx.moveTo(0,t+this.pixelShifter),this.ctx.lineTo(this.width,t+this.pixelShifter);this.ctx.strokeStyle=this.strokeColor,this.ctx.lineWidth=1,this.ctx.stroke()}drawVerticalRules(){this.ctx.beginPath();for(let t=0;t<=this.width;t+=this.cellSize)this.ctx.moveTo(t+this.pixelShifter,0),this.ctx.lineTo(t+this.pixelShifter,this.height);this.ctx.strokeStyle=this.strokeColor,this.ctx.lineWidth=1,this.ctx.stroke()}nextStep(){this.machine.nextStep(),this.redrawGrid(),this.iterations=this.iterations+1}play(){this.playing=!0,this.playInterval=setInterval((()=>{this.nextStep()}),this.playSpeed)}pause(){this.playing=!1,clearInterval(this.playInterval)}redrawGrid(){this.ctx.clearRect(0,0,this.width,this.height),this.drawGrid(),this.drawCells(),this.tick=this.tick+1}clearGrid(){clearInterval(this.playInterval),this.iterations=0,this.machine.setCells([]),this.redrawGrid()}onCanvasClick(t){const s=t.clientY-this.canvas.offsetTop,i=Math.floor((t.clientX-this.canvas.offsetLeft)/this.cellSize),h=Math.floor(s/this.cellSize);this.machine.toggleCell({x:i,y:h}),this.redrawGrid()}setDemo(t){switch(this.clearGrid(),t){case 1:this.machine.setCells(l);break;case 2:this.machine.setCells(o)}this.redrawGrid()}render(){const t=this.machine?this.machine.getLivingCells():[];return s(i,null,s("div",null,this.playing?s("button",{onClick:()=>this.pause()},"Pause"):s("button",{onClick:()=>this.play()},"Play"),s("button",{onClick:()=>this.nextStep(),disabled:this.playing},"Next step"),s("button",{onClick:()=>this.clearGrid(),disabled:this.playing},"Clear"),s("span",null,"  Iterations: ",this.iterations),s("div",null,s("button",{onClick:()=>this.setDemo(1),disabled:this.playing},"Demo 1"),s("button",{onClick:()=>this.setDemo(2),disabled:this.playing},"Demo 2")),e.isDevelopment&&s("div",null,s("input",{type:"text",value:JSON.stringify(t),readOnly:!0}))),s("br",null),s("canvas",{id:"grid"}))}};export{h as app_root,r as game_of_life}